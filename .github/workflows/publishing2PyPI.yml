name: publishing2PyPI
on:
  release:
    types: [published]

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  build_and_publish:
    runs-on: ubuntu-latest  
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Get package version
        run: |
          VERSION=NOT_SET
          VERSION=$(cat ./sift/version.py | grep -E -i '^VERSION.*' | cut -d'=' -f2 | cut -d\' -f2)
          [[ $VERSION == "NOT_SET" ]] && echo "Version in version.py NOT_SET" && exit 1
          echo "curr_version=$(echo $VERSION)" >> $GITHUB_ENV
      - name: Get remote tags
        run: |
          TAGS=NOT_SET
          TAGS=$(gh api \
          -H "Accept: application/vnd.github+json" \
          /repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/git/matching-refs/ | jq -c '.[] | select (.ref | startswith("refs/tags"))' | jq -c '.ref' | cut -d'/' -f3 | cut -d'"' -f1)
          [[ $TAGS == "NOT_SET" ]] && echo "Failed to set Remote Tags" && exit 1
          echo $TAGS
          echo "remote_tags=$(echo $TAGS)" >> $GITHUB_ENV
      - name: Compare package version and remote tags
        run: |
          for TAG in $remote_tags; do
            if [[ $TAG == *"$curr_version"* ]]; then
              echo "Version $curr_version alredy exists in $TAG"
              exit 1
            fi
          done
      - name: Configure pypirc
        run: |
          cat << EOF > ~/.pypirc
          [distutils]
          index-servers =
            pypi
          [pypi]
          username=${{ secrets.USER }}
          password=${{ secrets.PASS }}
          EOF
      - name: Create distribution files
        run: |
          python3 setup.py sdist
      - name: Upload distribution files
        run: |
          python3 -m pip install --user --upgrade twine
          ls  dist/ | xargs  -I % python3 -m twine upload --repository pypi dist/%
      - name: Download and check new package version
        run: |
          echo $curr_version
          pip3 install Sift
          pip3 show Sift | grep "Version: $curr_version" > /dev/null
          if [ $? != 0 ]; then echo "packege with version $curr_version does not exist"; fi
